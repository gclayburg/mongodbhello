/*
 * VisualSync - a tool to visualize user data synchronization
 * Copyright (c) 2015 Gary Clayburg
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package com.garyclayburg.persistence.repository;

import com.garyclayburg.MongoInMemoryTestBase;
import com.garyclayburg.attributes.AttributeServiceTestBase;
import com.garyclayburg.persistence.domain.BogusMailAccount;
import com.garyclayburg.persistence.domain.QUser;
import com.garyclayburg.persistence.domain.User;
import com.garyclayburg.persistence.domain.UserAccount;
import com.garyclayburg.scim.Resources;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.collect.Maps;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

/**
 * Created by IntelliJ IDEA.
 * Date: 2/5/15
 * Time: 9:33 PM
 *
 * @author Gary Clayburg
 */
@RunWith(SpringJUnit4ClassRunner.class)
public class AccountMatcherTest extends MongoInMemoryTestBase {
    @SuppressWarnings("UnusedDeclaration")
    private static final Logger log = LoggerFactory.getLogger(AccountMatcherTest.class);
    @Qualifier("auditedUserRepo")
    @Autowired
    @SuppressWarnings("SpringJavaAutowiredMembersInspection")
    private UserStore auditedUserRepo;

    @SuppressWarnings({"SpringJavaAutowiringInspection","SpringJavaAutowiredMembersInspection"})
    @Autowired
    private AccountMatcher accountMatcher;

    @SuppressWarnings({"SpringJavaAutowiringInspection","SpringJavaAutowiredMembersInspection"})
    @Autowired
    private UserAuditRepo userAuditRepo;

    @Autowired
    @SuppressWarnings({"SpringJavaAutowiringInspection","SpringJavaAutowiredMembersInspection"})
    // IntelliJ confused by spring-boot wiring
    protected AutoUserRepo autoUserRepo;

    private User                     hank;
    private User                     hankAgain;
    private AttributeServiceTestBase attributeServiceTestBase;
    @Rule
    public TestName testName = new TestName();

    @Before
    public void setUp() throws IOException, URISyntaxException {
        log.debug("Running test setUp: " + testName.getMethodName());
        autoUserRepo.deleteAll();
        userAuditRepo.deleteAll();

        hank = new User();
        hank.setFirstname("Hank");
        hank.setLastname("Williams");
        hank.setUid("1234");
        attributeServiceTestBase = new AttributeServiceTestBase();
        attributeServiceTestBase.setUpBeansWithRootFromClasspath("groovies-accountmatch/empty.groovy");

    }

    @Test
    public void testFindQuseraccount() throws Exception {
        auditedUserRepo.save(hank);
        hank.setLastname("Williams Jr");
        BogusMailAccount hankaccount1 = new BogusMailAccount();
        hankaccount1.setUsername("bocephus");
        hankaccount1.setEmailAddress("hank@example.com");
        hankaccount1.setDisplayname("Hank Williams, Jr");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        QUser qUser = new QUser("user");  //QUser is generated by querydsl maven generate source phase
        Iterable<User> userList = autoUserRepo.findAll(qUser.userAccounts.any().username.eq("bocephus"));
        for (User user : userList) {
            log.info("user is: " + user.getId() + " " + user.getFirstname() + " " + user.toString());
            for (UserAccount useraccount : user.getUserAccounts()) {
                log.info("account type: " + useraccount.getAccountType());
                log.info("account username: " + useraccount.getUsername());
                log.info("account displayname: " + ((BogusMailAccount) useraccount).getDisplayname());
            }
        }
        assertEquals(1,Iterables.size(userList));
    }

    @Test
    public void testMatchAccountExisting() throws Exception {
        auditedUserRepo.save(hank);
        //hand-jam existing user account
        Resources hankaccount1 = new Resources();
        hankaccount1.setUsername("bocephus");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        User matchedUser = accountMatcher.matchAccount(hankaccount1);
        assertNotNull(matchedUser);
    }

    @Test
    public void testAccountTypeMismatch() throws Exception {
        auditedUserRepo.save(hank);
        //hand-jam existing user account
        Resources hankaccount1 = new Resources();
        hankaccount1.setUsername("bocephus");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        BogusMailAccount mailAccount = new BogusMailAccount();
        mailAccount.setUsername("bocephus");
        User matchedUser = accountMatcher.matchAccount(mailAccount);
        assertNull(matchedUser);
    }

    @Test
    public void testInstanceTypeMismatch() throws Exception {
        auditedUserRepo.save(hank);
        //hand-jam existing user account
        Resources hankaccount1 = new Resources();
        hankaccount1.setUsername("bocephus");
        hankaccount1.setInstanceName("vendor LDAP");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        Resources hankaccount2 = new Resources();
        hankaccount2.setUsername("bocephus");
        hankaccount2.setInstanceName("internal LDAP");
        assertNull(accountMatcher.matchAccount(hankaccount2));

        Resources hankaccountShouldMatch = new Resources();
        hankaccountShouldMatch.setUsername("bocephus");
        hankaccountShouldMatch.setInstanceName("vendor LDAP");
        assertNotNull(accountMatcher.matchAccount(hankaccountShouldMatch));

    }

    @Test
    public void testReplaceAccountExisting() throws Exception {
        auditedUserRepo.save(hank);
        //hand-jam existing user account
        Resources hankaccount1 = new Resources();
        hankaccount1.setUsername("bocephus");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        //simulate account being updated, as from a sync or recon
        Resources ldapScimAccount = new Resources();
        ldapScimAccount.getName().setFamilyName("Williams");
        ldapScimAccount.getName().setGivenName("Hank");
        ldapScimAccount.setUsername("bocephus");
        accountMatcher.attachAccount(ldapScimAccount);

        QUser qUser = new QUser("user");  //QUser is generated by querydsl maven generate source phase
        Iterable<User> userList = autoUserRepo.findAll(qUser.userAccounts.any().username.eq("bocephus"));
        assertEquals(1,Iterables.size(userList));
        User firstUser = Iterables.getFirst(userList,null);

        assert firstUser != null;
        List<UserAccount> userAccounts = firstUser.getUserAccounts();
        assertEquals(1,userAccounts.size());
        Map<String, UserAccount> mappedAccounts = Maps.uniqueIndex(userAccounts,new Function<UserAccount, String>() {
            public String apply(UserAccount from) {
                return from.getAccountType() + from.getUsername();
            }
        });

        UserAccount updatedAccount = mappedAccounts.get(hankaccount1.getAccountType() + hankaccount1.getUsername());
        assertEquals("bocephus",updatedAccount.getUsername());
        Resources updatedAccount1 = (Resources) updatedAccount;
        assertEquals("Williams",updatedAccount1.getName().getFamilyName());
    }

    @Test
    public void testAddAccountToExisting() throws Exception {
        auditedUserRepo.save(hank);
        //hand-jam existing user account
        Resources hankaccount1 = new Resources();
        hankaccount1.setUsername("bocephus");
        ArrayList<UserAccount> hankAccounts = new ArrayList<>();
        hankAccounts.add(hankaccount1);
        hank.setUserAccounts(hankAccounts);
        auditedUserRepo.save(hank);

        //simulate account being discovered and attached to an existing user with existing account, as from a sync or recon
        BogusMailAccount mailAccount = new BogusMailAccount();
        mailAccount.setDisplayname("Hank");
        mailAccount.setEmailAddress("hank@example.com");
        mailAccount.setUsername("HWilliam");
        accountMatcher.setAttributeService(attributeServiceTestBase.getAttributeService());
        accountMatcher.attachAccount(mailAccount);

        QUser qUser = new QUser("user");  //QUser is generated by querydsl maven generate source phase
        Iterable<User> userList = autoUserRepo.findAll(qUser.userAccounts.any().username.eq("bocephus"));
        assertEquals(1,Iterables.size(userList));
        User firstUser = Iterables.getFirst(userList,null);

        assert firstUser != null;
        List<UserAccount> userAccounts = firstUser.getUserAccounts();
        assertEquals(2,userAccounts.size());
    }

    @Test
    public void testAttachScimUserByUsernamePolicy() throws Exception {
        auditedUserRepo.save(hank);
        Resources ldapScimAccount = new Resources();
        ldapScimAccount.getName().setFamilyName("Williams");
        ldapScimAccount.getName().setGivenName("Hank");
        ldapScimAccount.setUsername("HWilliam");
        ArrayList<Resources> accountList = new ArrayList<>();
        accountList.add(ldapScimAccount);

        accountMatcher.setAttributeService(attributeServiceTestBase.getAttributeService());
        accountMatcher.attachAccount(ldapScimAccount);

        QUser qUser = new QUser("user");  //QUser is generated by querydsl maven generate source phase
        Iterable<User> userList = autoUserRepo.findAll(qUser.userAccounts.any().username.eq("HWilliam"));
        for (User user : userList) {
            log.info("user is: " + user.getId() + " " + user.getFirstname() + " " + user.toString());
            for (UserAccount useraccount : user.getUserAccounts()) {
                log.info("account type: " + useraccount.getAccountType());
                log.info("account username: " + useraccount.getUsername());
            }
        }
        //should be matched by using username attribute policy
        assertEquals(1,Iterables.size(userList));
    }

}
